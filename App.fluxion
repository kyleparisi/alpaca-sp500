[
  {
    "app": {
      "style": {
        "width": "100%",
        "height": "100%",
        "transition": "transform 0.2s"
      },
      "svgStyle": {
        "width": "100%",
        "height": "100vh",
        "overflow": "visible",
        "transition": "transform 0.2s"
      },
      "linkStyle": {
        "strokeWidth": 1,
        "strokeLinejoin": "round",
        "strokeLinecap": "round",
        "fill": "none"
      },
      "linkOverlapStyle": {
        "strokeWidth": 50,
        "strokeLinejoin": "round",
        "strokeLinecap": "round",
        "fill": "none",
        "stroke": "rgba(230, 230, 230, 0)"
      }
    },
    "editor": {
      "height": 357
    },
    "pan": {
      "x": -600,
      "y": 18
    },
    "throttle": 2,
    "scale": 1,
    "links": {
      "0": {
        "direction": "->",
        "source": {
          "node": 1,
          "port": "alpaca"
        },
        "target": {
          "node": 2,
          "port": "alpaca"
        },
        "id": 0,
        "layer_id": 0,
        "logging": false
      },
      "21": {
        "direction": "->",
        "source": {
          "node": 1,
          "port": "alpaca"
        },
        "target": {
          "node": 21,
          "port": "alpaca"
        },
        "id": 21,
        "layer_id": 0
      },
      "22": {
        "direction": "->",
        "source": {
          "node": 1,
          "port": "alpaca"
        },
        "target": {
          "node": 22,
          "port": "alpaca"
        },
        "id": 22,
        "layer_id": 0
      },
      "23": {
        "direction": "->",
        "source": {
          "node": 1,
          "port": "alpaca"
        },
        "target": {
          "node": 3,
          "port": "alpaca"
        },
        "id": 23,
        "layer_id": 0
      },
      "27": {
        "direction": "->",
        "source": {
          "node": 2,
          "port": "data"
        },
        "target": {
          "node": 24,
          "port": "data"
        },
        "id": 27,
        "layer_id": 0
      },
      "28": {
        "direction": "->",
        "source": {
          "node": 22,
          "port": "data"
        },
        "target": {
          "node": 25,
          "port": "data"
        },
        "id": 28,
        "layer_id": 0,
        "logging": false
      },
      "29": {
        "direction": "->",
        "source": {
          "node": 21,
          "port": "data"
        },
        "target": {
          "node": 26,
          "port": "data"
        },
        "id": 29,
        "layer_id": 0,
        "logging": false
      },
      "41": {
        "direction": "->",
        "source": {
          "node": 1,
          "port": "alpaca"
        },
        "target": {
          "node": 30,
          "port": "alpaca"
        },
        "id": 41,
        "layer_id": 0
      },
      "42": {
        "direction": "->",
        "source": {
          "node": 30,
          "port": "data"
        },
        "target": {
          "node": 31,
          "port": "orders"
        },
        "id": 42,
        "layer_id": 0
      },
      "66": {
        "direction": "->",
        "source": {
          "node": 33,
          "port": "ping"
        },
        "target": {
          "node": 1,
          "port": "ping"
        },
        "id": 66,
        "layer_id": 0
      },
      "70": {
        "direction": "->",
        "source": {
          "node": 37,
          "port": "data"
        },
        "target": {
          "node": 3,
          "port": "symbols"
        },
        "id": 70,
        "layer_id": 0
      },
      "71": {
        "direction": "->",
        "source": {
          "node": 3,
          "port": "data"
        },
        "target": {
          "node": 38,
          "port": "quotes"
        },
        "id": 71,
        "layer_id": 0,
        "logging": true
      },
      "72": {
        "direction": "->",
        "source": {
          "node": 26,
          "port": "true"
        },
        "target": {
          "node": 38,
          "port": "hasBuyingPower"
        },
        "id": 72,
        "layer_id": 0,
        "logging": true
      },
      "73": {
        "direction": "->",
        "source": {
          "node": 1,
          "port": "alpaca"
        },
        "target": {
          "node": 39,
          "port": "alpaca"
        },
        "id": 73,
        "layer_id": 0
      },
      "74": {
        "direction": "->",
        "source": {
          "node": 38,
          "port": "orders"
        },
        "target": {
          "node": 39,
          "port": "orders"
        },
        "id": 74,
        "layer_id": 0
      }
    },
    "nodes": {
      "1": {
        "module": "js",
        "name": "Alpaca",
        "require": "const Alpaca = require('@alpacahq/alpaca-trade-api');",
        "run": "const alpaca = new Alpaca({\n  keyId: process.env.ALPACA_KEY,\n  secretKey: process.env.ALPACA_SECRET,\n  paper: true,\n})\noutputs.alpaca.put(alpaca);",
        "inputs": {
          "ping": true
        },
        "outputs": {
          "alpaca": true
        },
        "id": 1,
        "layer_id": 0,
        "position": {
          "left": 5,
          "right": 210,
          "top": -47
        },
        "symbol": "https://app.alpaca.markets/resources/images/logo-inverse-white-mobile.png",
        "domrect": {
          "x": -44,
          "y": -35,
          "width": 120,
          "height": 95,
          "top": -35,
          "right": 76,
          "bottom": 60,
          "left": -44
        }
      },
      "2": {
        "module": "js",
        "name": "getClock",
        "require": "",
        "run": "const clock = await alpaca.getClock();\noutputs.data.put(clock);",
        "inputs": {
          "alpaca": true
        },
        "outputs": {
          "data": true
        },
        "id": 2,
        "layer_id": 0,
        "position": {
          "left": 309,
          "right": 402,
          "top": 172
        },
        "domrect": {
          "x": 236,
          "y": 237,
          "width": 120,
          "height": 40,
          "top": 237,
          "right": 356,
          "bottom": 277,
          "left": 236
        }
      },
      "3": {
        "module": "js",
        "name": "lastQuote",
        "require": "",
        "run": "const quotes = symbols.map(symbol => {\n  return alpaca.lastQuote(symbol)\n});\n\nPromise.all(quotes)\n  .then(responses => responses.filter(r => r.status === \"success\"))\n  .then(outputs.data.put)",
        "inputs": {
          "alpaca": true,
          "symbols": true,
          "marketIsOpen": false
        },
        "outputs": {
          "data": true
        },
        "id": 3,
        "layer_id": 0,
        "position": {
          "left": 722,
          "right": 842,
          "top": 380
        },
        "domrect": {
          "x": 673,
          "y": 392,
          "width": 120,
          "height": 60,
          "top": 392,
          "right": 793,
          "bottom": 452,
          "left": 673
        }
      },
      "21": {
        "module": "js",
        "name": "getAccount",
        "require": "const _ = require(\"lodash\");",
        "run": "const account = await alpaca.getAccount();\n_.get(outputs, \"data.put\", ()=>{})(account);",
        "inputs": {
          "alpaca": true
        },
        "outputs": {
          "data": true
        },
        "id": 21,
        "layer_id": 0,
        "position": {
          "left": 746,
          "right": 864,
          "top": 94
        },
        "domrect": {
          "x": 697,
          "y": 106,
          "width": 120,
          "height": 40,
          "top": 106,
          "right": 817,
          "bottom": 146,
          "left": 697
        }
      },
      "22": {
        "module": "js",
        "name": "getPositions",
        "require": "const _ = require(\"lodash\");",
        "run": "const positions = await alpaca.getPositions();\n_.get(outputs, \"data.put\", ()=>{})(positions)\n",
        "inputs": {
          "alpaca": true,
          "marketIsOpen": false
        },
        "outputs": {
          "data": true
        },
        "id": 22,
        "layer_id": 0,
        "position": {
          "left": 736,
          "right": 858,
          "top": 246
        },
        "domrect": {
          "x": 687,
          "y": 258,
          "width": 123.5625,
          "height": 40,
          "top": 258,
          "right": 810.5625,
          "bottom": 298,
          "left": 687
        }
      },
      "24": {
        "module": "js",
        "name": "Is market open",
        "require": "",
        "run": "if (!outputs) return false;\nif (outputs[data.is_open]) {\n  outputs[data.is_open].put(\"*\");  \n}\n",
        "inputs": {
          "data": true
        },
        "outputs": {
          "true": true,
          "false": true
        },
        "id": 24,
        "layer_id": 0,
        "position": {
          "left": 486,
          "right": 619,
          "top": 169
        },
        "domrect": {
          "x": 411,
          "y": 238,
          "width": 140.8125,
          "height": 40,
          "top": 238,
          "right": 551.8125,
          "bottom": 278,
          "left": 411
        }
      },
      "25": {
        "module": "js",
        "name": "Has Positions",
        "require": "const _ = require(\"lodash\")",
        "run": "if (data.length) {\n  _.get(outputs, \"true.put\", ()=>{})(data);\n} else {\n  _.get(outputs, \"false.put\", ()=>{})(data); \n}\n",
        "inputs": {
          "data": true
        },
        "outputs": {
          "true": true,
          "false": true
        },
        "id": 25,
        "layer_id": 0,
        "position": {
          "left": 940,
          "right": 1065,
          "top": 242
        },
        "domrect": {
          "x": 986,
          "y": 252,
          "width": 132.140625,
          "height": 40,
          "top": 252,
          "right": 1118.140625,
          "bottom": 292,
          "left": 986
        }
      },
      "26": {
        "module": "js",
        "name": "Has buying power",
        "require": "const _ = require(\"lodash\");",
        "run": "const hasBuyingPower = parseInt(data.buying_power) > 0;\nif (hasBuyingPower) {\n  _.get(outputs, \"true.put\", ()=>{})(data);\n} else {\n  _.get(outputs, \"false.put\", ()=>{})(data);\n}",
        "inputs": {
          "data": true
        },
        "outputs": {
          "true": true,
          "false": true
        },
        "id": 26,
        "layer_id": 0,
        "position": {
          "left": 945,
          "right": 1101,
          "top": 91
        },
        "domrect": {
          "x": 991,
          "y": 115,
          "width": 165.0625,
          "height": 40,
          "top": 115,
          "right": 1156.0625,
          "bottom": 155,
          "left": 991
        }
      },
      "30": {
        "module": "js",
        "name": "getOrders",
        "require": "",
        "run": "const orders = await alpaca.getOrders();\noutputs.data.put(orders);\n",
        "inputs": {
          "alpaca": true,
          "marketIsOpen": false
        },
        "outputs": {
          "data": true
        },
        "id": 30,
        "layer_id": 0,
        "position": {
          "left": 743,
          "right": 861,
          "top": -16
        },
        "domrect": {
          "x": 696,
          "y": -29,
          "width": 120,
          "height": 40,
          "top": -29,
          "right": 816,
          "bottom": 11,
          "left": 696
        }
      },
      "31": {
        "module": "js",
        "name": "Has pending orders",
        "require": "const _ = require(\"lodash\");",
        "run": "if (orders.length) {\n  _.get(outputs, \"true.put\", ()=>{})(data);\n} else {\n  _.get(outputs, \"false.put\", ()=>{})(data); \n}\n",
        "inputs": {
          "orders": true
        },
        "outputs": {
          "true": true,
          "false": true
        },
        "id": 31,
        "layer_id": 0,
        "position": {
          "left": 945,
          "right": 1115,
          "top": -21
        },
        "domrect": {
          "x": 968,
          "y": -26,
          "width": 179.234375,
          "height": 40,
          "top": -26,
          "right": 1147.234375,
          "bottom": 14,
          "left": 968
        }
      },
      "33": {
        "module": "js",
        "name": "js",
        "require": "",
        "run": "function ping() {\n  setTimeout(() => {\n    outputs.ping.put(\"*\");\n    ping();\n  }, 360000);\n}\noutputs.ping.put(\"*\");\nping();\n\n\n",
        "inputs": {},
        "outputs": {
          "ping": true
        },
        "position": {
          "left": -209,
          "right": -89,
          "top": -42
        },
        "id": 33,
        "layer_id": 0,
        "domrect": {
          "x": -258,
          "y": -30,
          "width": 120,
          "height": 40,
          "top": -30,
          "right": -138,
          "bottom": 10,
          "left": -258
        }
      },
      "37": {
        "module": "webviewnode",
        "name": "webviewnode",
        "require": "",
        "run": "function Sleep(duration) {\n  return new Promise(resolve => setTimeout(resolve, duration));\n}\n\n(async() => {\n  document.querySelector(\"#scr-res-table > div.Ovx\\\\(a\\\\).Ovx\\\\(h\\\\)--print.Ovy\\\\(h\\\\) > table > thead > tr > th:nth-child(4)\").click()\n  await Sleep(1000)\n  document.querySelector(\"#scr-res-table > div.Ovx\\\\(a\\\\).Ovx\\\\(h\\\\)--print.Ovy\\\\(h\\\\) > table > thead > tr > th:nth-child(4)\").click()\n  await Sleep(1000)\n  let els = []\n  for (let i = 1; i <= 10; i++) {\n  \tlet ticker = document.querySelector(`#scr-res-table table tr:nth-child(${i}) a`).innerText\n    els.push(ticker)\n  }\n  console.log(els)\n  return els;\n})()\n",
        "src": "https://finance.yahoo.com/gainers",
        "inputs": {},
        "outputs": {
          "data": true
        },
        "position": {
          "left": 23,
          "right": 513,
          "top": 420
        },
        "style": {
          "width": "500px",
          "height": "500px"
        },
        "id": 37,
        "layer_id": 0
      },
      "38": {
        "module": "js",
        "name": "Make orders",
        "require": "",
        "run": "let buyingPower = hasBuyingPower.buying_power;\nconst orders = {}\nquotes.map(quote => {\n  orders[quote.symbol] = {\n    \"side\": \"buy\",\n    \"symbol\": quote.symbol,\n    \"type\": \"market\",\n    \"qty\": 0,\n    \"time_in_force\": \"gtc\",\n    \"order_class\": \"bracket\",\n    \"take_profit\": {\n      \"limit_price\": 0\n    },\n    \"stop_loss\": {\n      \"stop_price\": 0\n    }\n  }\n});\nconsole.log(orders)\n\nfunction processQuote(quote) {\n  const delta = buyingPower - quote.last.bidprice;\n  if (delta < 0) {\n    console.log(`Not enough buying power for ${quote.symbol}`);\n    return false\n  }\n  buyingPower = delta\n  orders[quote.symbol].qty += 1;\n  const profit = parseFloat((quote.last.askprice * 1.02).toFixed(2));\n  const stopLoss = parseFloat((quote.last.bidprice * 0.95).toFixed(2));\n  orders[quote.symbol].take_profit.limit_price = profit;\n  orders[quote.symbol].stop_loss.stop_price = stopLoss;\n  if (profit < stopLoss) {\n    console.log(profit, stopLoss, quote)\n    throw new Error(\"need more profit\");\n    return\n  }\n  return true\n}\n\nfunction recurse() {\n  const results = quotes.map(processQuote)\n  if (results.filter(r => r).length > 0) {\n    recurse()\n  }\n}\nrecurse()\n\n// remove qty 0\nObject.keys(orders).map(key => {\n  if (orders[key].qty === 0) {\n  \tdelete orders[key]\n  }\n});\n\n\nconsole.log(orders)\noutputs.orders.put(Object.values(orders))\n",
        "inputs": {
          "hasBuyingPower": true,
          "noPendingOrders": false,
          "quotes": true
        },
        "outputs": {
          "orders": true
        },
        "position": {
          "left": 1219,
          "right": 1337,
          "top": 323
        },
        "id": 38,
        "layer_id": 0
      },
      "39": {
        "module": "js",
        "name": "Submit orders",
        "require": "",
        "run": "orders.map(order => {\n  alpaca.createOrder(order)\n  .then(console.log)\n  .catch(e => {\n    if (!e.base_price) {\n      console.log(e)\n      return\n    }\n    order.take_profit.limit_price = (parseFloat(e.base_price) * 1.02).toFixed(2)\n    console.log(\"retrying order\")\n    alpaca.createOrder(order).then(console.log).catch(console.log)\n    \n  })\n})",
        "inputs": {
          "alpaca": true,
          "orders": true
        },
        "outputs": {},
        "position": {
          "left": 1511,
          "right": 1554,
          "top": 284
        },
        "id": 39,
        "layer_id": 0
      }
    },
    "packets": {},
    "configuring": {
      "module": "js",
      "name": "Submit orders",
      "require": "",
      "run": "orders.map(order => {\n  alpaca.createOrder(order)\n  .then(console.log)\n  .catch(e => {\n    if (!e.base_price) {\n      console.log(e)\n      return\n    }\n    order.take_profit.limit_price = (parseFloat(e.base_price) * 1.02).toFixed(2)\n    console.log(\"retrying order\")\n    alpaca.createOrder(order).then(console.log).catch(console.log)\n    \n  })\n})",
      "inputs": {
        "alpaca": true,
        "orders": true
      },
      "outputs": {},
      "position": {
        "left": 1511,
        "right": 1554,
        "top": 284
      },
      "id": 39,
      "layer_id": 0
    },
    "addingLink": {},
    "mouseOverPort": "",
    "webview": {
      "style": {
        "width": "320px",
        "height": "480px",
        "left": "10px",
        "top": "10px"
      },
      "src": ""
    },
    "problem": {},
    "selectedLinks": {}
  }
]